I will use securecrt or Vm for this hw2 
First we need to git clone the reposity to our system folder then we will run these file using different ways and technique since we will have to disassemble them. 

0.It is fairly easy for the first one: you just run it with "./0" this will instantly give you the secrect. 

1.The second one we will use "ltrace ./1" to print out the call to sharedlibraries then you will look at the function that generate that random number which is rand. Now next to the = sign, you should find the random number in hex. Finally you convert it to decimal and eneter it to the blank. The secrect will appear. 

2.The third one will require you to use "strace -f ./2" so we can print out the call to system. Now a bunch of system call log will appear, you will find the clone that contain the value of child pid which is the second clone in my case and my value is 140473. You will then enter this number for the childpid and the secrets will be solved. Your secrets will appear informat write(# ,"secrect\n") under the line write(# ,"you win! the secret is: \n"). 

3. We will do the same for this one "strace -f ./3" to disassemble the system call( becuase when we use ./3 to open the file said it need a file name to operate). After you run the command you will find your file name near the end which is stat("iamspecial", 0x######) with no directory found  in your secrect. You will then create this file "vi iamspecial" and run again. You will find that you got the correct file found but this file doesnt have permission to access the secrect. Therefore we roll back to our system call again to find the fstate line that grand you the permission in my case is fstat(3, {st_mode=S_IFREG|0755, st_size=######, ...}) = 0. Finaly we know that 755 grant the fileâ€™s owner read, write and execute permissions, read and execute permissions to group members. Now we go ahead and grand the file iamspecial the permission using "chmod + the number you found in fstat remove the 0 from that number + iamspecial" then run strace -f ./3 or ./3 again. You will find your secrect. 

4. Again we face the same issue as 3 since ./4 doesnt work but it does tell you the missing share object file, but this one is a sharedlibrary in this case (lib361.so)=> We go ahead and create this .so file. First we need to create a lib361.c file as the tutorial from lab 4 vi lib361.c, then we complie it to get the lib361.so file using these comand "gcc -c -fpic -Wall -Werror lib361.c" => "gcc -shared -o lib361.so lib361.o". You will notice that it still couldnt find the library after ./4, so we need to export the library with "LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH". Now we run again ./4 and they will tell you the function name that is missing from library (secretoperation) and to know what it does we need to again dumpt all assembly code of 4 to a .txt file so we can read the flow of it with this "objdump -d ./4 > assembly.txt ". Now we get into the .txt file and see what is going on with the function. Turn out, secretoperation is performing assert_xor, so we go ahead create asert_xor in lib361.c int secretoperation(int x, int y) { return x ^ y; }. Finally we recompile it to .0 file and then run ./4 gain => you will find your secrect. 
